//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "component_reservations")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub component_id: Uuid,
    pub reservation_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::components::Entity",
        from = "Column::ComponentId",
        to = "super::components::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Components,
    #[sea_orm(
        belongs_to = "super::reservations::Entity",
        from = "Column::ReservationId",
        to = "super::reservations::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Reservations,
}

impl Related<super::components::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Components.def()
    }
}

impl Related<super::reservations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Reservations.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
