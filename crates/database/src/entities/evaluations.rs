//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "evaluations")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub component_id: Uuid,
    pub instructor_id: Uuid,
    pub course_short_name: String,
    pub course_level: String,
    pub total_students: i16,
    pub num_responses: i16,
    pub hours_per_week: Option<Decimal>,
    pub interest_in_student_learning: Option<Decimal>,
    pub clearly_explain_requirements: Option<Decimal>,
    pub clear_learning_objectives: Option<Decimal>,
    pub instructor_provides_feedback: Option<Decimal>,
    pub demonstrate_importance: Option<Decimal>,
    pub explains_subject_matter: Option<Decimal>,
    pub show_respect_for_students: Option<Decimal>,
    pub overall_teaching_rate: Option<Decimal>,
    pub overall_course_rate: Option<Decimal>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::components::Entity",
        from = "Column::ComponentId",
        to = "super::components::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Components,
    #[sea_orm(
        belongs_to = "super::instructors::Entity",
        from = "Column::InstructorId",
        to = "super::instructors::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    Instructors,
}

impl Related<super::components::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Components.def()
    }
}

impl Related<super::instructors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Instructors.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
