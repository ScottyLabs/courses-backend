name: Deploy

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - "crates/server/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".github/workflows/deploy-collie.yml"

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    env:
      ENVIRONMENT: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.COLLIE_ASSUME_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ENVIRONMENT }}/collie:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ENVIRONMENT }}/collie:latest
          cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ENVIRONMENT }}/collie:latest
          cache-to: type=inline

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: infra/task-definition.collie.json
          container-name: collie-server
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ENVIRONMENT }}/collie:${{ github.sha }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: collie
          cluster: ${{ env.ENVIRONMENT }}-scottylabs-cluster
          wait-for-service-stability: false
